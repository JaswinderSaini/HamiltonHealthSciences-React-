[{"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\index.js":"1","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\App.js":"2","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\Table.js":"4","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\TableRow.js":"5","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\DataFetching.js":"6"},{"size":500,"mtime":1644389991662,"results":"7","hashOfConfig":"8"},{"size":8902,"mtime":1644558188554,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1644389992031,"results":"10","hashOfConfig":"8"},{"size":669,"mtime":1644392241283,"results":"11","hashOfConfig":"8"},{"size":318,"mtime":1644394517074,"results":"12","hashOfConfig":"8"},{"size":1070,"mtime":1644395302209,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"12e0jhs",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\index.js",[],[],["36","37"],"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\App.js",["38","39","40","41","42","43","44","45"],[],"import React, { useState } from \"react\";\nimport './App.css';\nimport data from \"./data.json\";\nimport hospital from \"./images/hospital.png\";\nimport footer2 from \"./images/footer2.png\";\n//import {css} from \"emotion\";\n\n/**\n * This function is creating webpage(form, table, etc.) and handles the data being entered and displayed\n * \n * @returns The Main Content of the Page\n */\nfunction App() {\n  // to store the data from json file\n  const [patientInfo, setPatientInfo] = useState(data);\n\n  // to store data from form \n  const [addformData, setaddFormData] = useState({\n    firstName: '',\n    lastName: '',\n    dateOfBirth:'',\n    healthCard: '',\n    gender: 'Male'\n  })\n\n  // to use as the warning message\n  const [msg, setMsg] = useState({\n    message:''\n  })\n\n  /** \n   * It updates the addformData according to FirstName, LastName, DateOfBirth and Gender field input\n  */\n  const handleForm = (event) =>{\n    event.preventDefault();\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n    const newFormData = { ...addformData};\n    // if the entered data is coming from DateOfBirth\n    if(fieldName === \"dateOfBirth\"){\n      let date = new Date(fieldValue);\n      let current = new Date();\n      let currentTime = new Date(current.getFullYear(),current.getMonth(),current.getDate());\n      \n      // checking if the entered date is not a future date\n      if(date < currentTime){\n        newFormData[fieldName] = fieldValue;\n        setaddFormData(newFormData);\n        msg.message= \"\";\n      }\n      else{\n        newFormData[fieldName] = \"\";\n        setaddFormData(newFormData);\n        setMsg({message: \"-- Please fill the right Date --\"});\n        //msg.message= \"-- Please fill the right Date --\";\n      }\n    }\n    // update all the other data except DateOfBirth\n    else{\n      newFormData[fieldName] = fieldValue;\n      setaddFormData(newFormData);\n      msg.message= \"\";\n    }\n  }\n\n  /**\n   * It updates the addformData according HealthCardNumber field input\n   **/\n  const handleCardNumber = (event) =>{\n    event.preventDefault();\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n    const newFormData = { ...addformData};\n    let name = parseInt(fieldValue);\n\n    // checking if the given value is number \n    if(!isNaN(name)){\n      newFormData[fieldName] = name.toString();\n      setaddFormData(newFormData);\n    }\n    else{\n      newFormData[fieldName] = \"\";\n      setaddFormData(newFormData);\n    }\n\n    // keep showing this message until the healthCardNumber's length is 10\n    if(fieldValue.length < 10){\n      msg.message= \"-- Health Card Number should be 10 Digit long --\";\n    }\n    else{\n      msg.message= \"\";\n    }\n  }\n\n  /**\n   * It handles the form submit and updates the table with added values\n   */\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    let healthCard = addformData.healthCard;\n    let total = 0;\n\n    // checking if the healthCardNumber is 10 digit long\n    if(addformData.healthCard.length === 10){\n      let checkDigit = parseInt(healthCard[healthCard.length-1]);   // check digit value\n\n      // going through healthCardNumber and perfoeming mod 10\n      for(let i = 0; i < healthCard.length - 1; i++){\n        // the value that needs to be doubled\n        if(i % 2 === 0){\n          let addValue = parseInt(healthCard[i]) * 2;\n          // if the number is greater than 9, split it and add it together then add it to the total\n          if(addValue > 9){\n            let string = addValue.toString();\n            let a = parseInt(string[0]);\n            let b = parseInt(string[1]);\n            let add = a+b;\n            total += add;\n          }\n          else{\n            total += addValue;\n          }\n        }\n        // adding even position digits\n        else{\n          total += parseInt(healthCard[i]);\n        }\n      }\n\n      // checking the check digit is matching with the result and updating table and clearing form\n      if(checkDigit === (10 - (total % 10))){\n        // patient to add to the table\n        const newPatient = {\n          firstName: addformData.firstName,\n          lastName: addformData.lastName,\n          dateOfBirth: addformData.dateOfBirth,\n          healthCard: addformData.healthCard,\n          gender: addformData.gender\n        }\n        const newPatients = [...patientInfo, newPatient];\n        setPatientInfo(newPatients);\n\n        addformData.firstName = \"\";\n        addformData.lastName = \"\";\n        addformData.dateOfBirth = \"\";\n        addformData.healthCard = \"\";\n\n        msg.message= \"\";\n      }\n      // if check digit does not match, let the user know\n      else{\n        const newFormData = { ...addformData};\n        newFormData[\"healthCard\"] = \"\";\n        setaddFormData(newFormData);\n        msg.message = \"-- Check Digit does not match. Invalid Health Card Number!!! --\"\n      }\n    }\n    // if healthCardNumber's length is less than 10 then let the user know\n    else{\n      const newFormData = { ...addformData};\n      newFormData[\"healthCard\"] = \"\";\n      setaddFormData(newFormData);\n      msg.message= \"-- Health Card Number is not valid --\";\n    }\n  }\n\n  // returning the content of the webpage\n  return (\n    <div className=\"app-container\">\n      <header>\n        <img src={hospital} id=\"mainImage\"/>\n        <h1>Hamilton Health Sciences</h1>\n        <nav>\n            <a href=\"#\">Home</a>\n            <a href=\"#\">COVID-19</a>\n            <a href=\"#\">Services</a>\n            <a href=\"#\">News</a>\n            <a href=\"#\">About Us</a>\n            <a href=\"#\" id=\"signIn\">SignIn</a>\n        </nav>\n        <p>-- The form below is for online registration for a new patient. Feel free take your time and fill the form -- </p>\n    </header>\n      <h2>Fill the Form</h2>\n      <div id = \"addForm\">\n        <span><p>{msg[\"message\"]}</p></span>\n        <form onSubmit={handleFormSubmit}>\n          <div>\n            <label htmlFor =\"firstName\">First Name:</label>\n            <input type=\"text\" id = \"firstName\" name = \"firstName\" maxLength = \"20\" value = {addformData[\"firstName\"]}  onChange={handleForm} required =\"required\" />\n          </div>\n          \n          <div>\n            <label htmlFor = \"lastName\">Last Name:</label>\n            <input type=\"text\" id =\"lastName\" name = \"lastName\" maxLength = \"20\" value = {addformData[\"lastName\"]}  onChange={handleForm} required =\"required\" />\n          </div>\n         \n          <div>\n          <label htmlFor = \"dateOfBirth\" >Date of birth:</label>\n          <input type=\"date\" name = \"dateOfBirth\" value = {addformData[\"dateOfBirth\"]}   onChange={handleForm} required =\"required\" id =\"dateOfBirth\"/>\n          </div>\n\n          <div>\n            <label htmlFor=\"healthCard\">Health Card Number:</label>\n            <input type=\"text\" name = \"healthCard\" value = {addformData[\"healthCard\"]} maxLength=\"10\" onChange={handleCardNumber} required =\"required\" id =\"healthCard\" />\n          </div>\n\n          <div>\n            <label htmlFor =\"gender\">Gender:</label> \n            <select name = \"gender\" value = {addformData[\"gender\"]}  onChange={handleForm} id =\"gender\">\n              <option value=\"Male\">Male</option>\n              <option value=\"Female\">Female</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n          <div id = \"submit\">\n            <input type=\"submit\" value=\"Submit\"/>\n          </div>\n        </form>\n      </div>\n      <h3>Patients Information</h3>\n      <div id =\"table\">\n        <table>\n          <thead>\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Date of birth</th>\n              <th>HealthCard Number</th>\n              <th>Gender</th>\n            </tr>\n          </thead>\n          <tbody>\n            {patientInfo.map((patient)=>\n            <tr key = {patient.firstName}>\n              <td>{patient.firstName}</td>\n              <td>{patient.lastName}</td>\n              <td>{patient.dateOfBirth}</td>\n              <td>{patient.healthCard}</td>\n              <td>{patient.gender}</td>\n          </tr>\n          )}   \n          </tbody>\n        </table>\n      </div>\n      <footer>\n      <div id =\"footContainer\">\n            <div>\n                <img src = {footer2} />\n            </div>\n            <div>\n                <p className=\"center\">Home</p>\n                <p className=\"center\">New Updates</p>\n                <p className=\"center hidden\">New Covid-19 guidelines</p>\n            </div>\n            <div>\n                <p className=\"center\">Our Goal</p>\n                <p className=\"center\">Our Work</p>\n                <p className=\"center hidden\">Our Network</p>\n            </div>\n        </div>\n      </footer>\n    </div>\n    \n  );\n}\n/** <img src=\"https://www.transparentpng.com/thumb/baby-png/the-boss-baby-png-transparent-image-35.png\"/>*/\nexport default App;\n","C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\reportWebVitals.js",[],[],"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\Table.js",[],[],["46","47"],"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\TableRow.js",[],[],"C:\\xampp\\htdocs\\mystuff\\hello-world\\src\\components\\DataFetching.js",["48","49"],[],"import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios'\r\nimport Table from './Table';\r\n\r\nfunction DataFetching() {\r\n    const [data, newData] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      fetch('./getList.php')\r\n        .then((response) => response.text())\r\n        .then((response) => newData(response));\r\n    }, []);\r\n  \r\n    return <div>{data ? data : 'No data yet...'}</div>;\r\n  }\r\n/*function DataFetching(){\r\n    const [posts, setPosts] = useState([])\r\n\r\n    var heading = ['Name'];\r\n    var body =\r\n    [['Kapil', 'Jaipur', 'MCA'],\r\n    ['Aakash', 'Hisar', 'Btech'],\r\n    ['Mani', 'Ranchi', 'MSc'],\r\n    ['Yasfh', 'Udaipur', 'Mtech']\r\n    ];\r\n    useEffect(() =>{\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res =>{\r\n            console.log(res)\r\n            setPosts(res.data)\r\n        })\r\n        .catch(err =>{\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            {posts.map(post => post.title)}\r\n        </div>\r\n    )\r\n}*/\r\n\r\nexport default DataFetching",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":171,"column":9,"nodeType":"56","endLine":171,"endColumn":45},{"ruleId":"57","severity":1,"message":"58","line":174,"column":13,"nodeType":"56","endLine":174,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":175,"column":13,"nodeType":"56","endLine":175,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":176,"column":13,"nodeType":"56","endLine":176,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":177,"column":13,"nodeType":"56","endLine":177,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":178,"column":13,"nodeType":"56","endLine":178,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":179,"column":13,"nodeType":"56","endLine":179,"endColumn":37},{"ruleId":"54","severity":1,"message":"55","line":248,"column":17,"nodeType":"56","endLine":248,"endColumn":40},{"ruleId":"50","replacedBy":"59"},{"ruleId":"52","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":13},{"ruleId":"61","severity":1,"message":"65","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":13},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["66"],["67"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","no-global-assign","no-unsafe-negation"]